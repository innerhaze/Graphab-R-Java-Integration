# Define la ruta de la carpeta principal de resultados
ruta_principal <- "C:/Users/Usuario/Desktop/Archivos_tesis/Graphab_resultados"
# Ruta de la carpeta de resultados para los archivos ordenados
ruta_salida <- file.path(ruta_principal, "Resultados_lmetrics")
# Crear la carpeta de resultados si no existe
if (!dir.exists(ruta_salida)) {
dir.create(ruta_salida)
}
# Obtener la lista de subcarpetas dentro de la carpeta principal
subcarpetas <- list.dirs(path = ruta_principal, full.names = TRUE, recursive = FALSE)
# Inicializar contador para enumeración
contador <- 1
# Iterar sobre las subcarpetas
for (subcarpeta in subcarpetas) {
# Obtener el nombre de la subcarpeta
nombre_subcarpeta <- basename(subcarpeta)
# Obtener la ruta de la carpeta "Conectparamo" dentro de la subcarpeta
carpeta_conectparamo <- file.path(subcarpeta, "Conectparamo")
# Obtener la lista de archivos CSV dentro de la carpeta "Conectparamo"
archivos_csv <- list.files(path = carpeta_conectparamo, pattern = "linkset1-links.csv", full.names = TRUE)
# Iterar sobre los archivos CSV y procesarlos
for (archivo_csv in archivos_csv) {
# Leer el archivo CSV
datos <- read.csv(archivo_csv, stringsAsFactors = FALSE)
# Ordenar las filas basadas en la columna "ID1"
#datos_ordenados <- datos[order(datos$ID1), ]
# Construir el nombre del archivo de salida con enumeración al principio
nombre_archivo_salida <- paste0(contador, "_", nombre_subcarpeta, "_", basename(archivo_csv))
# Escribir los datos (ordenados) en un nuevo archivo CSV en la carpeta de resultados
write.csv(datos, file = file.path(ruta_salida, nombre_archivo_salida), row.names = FALSE)
# Incrementar contador
contador <- contador + 1
}
}
# Ruta del archivo CSV con los nombres correspondientes a los números
archivo_nombres <- "C:/Users/Usuario/Desktop/Archivos_tesis/Clados_defin/Clados_todo_espeletia - copia (2).csv"
# Leer el archivo CSV con los nombres
nombres_df <- read.csv(archivo_nombres, stringsAsFactors = FALSE)
# Crear un mapeo entre los números y los nombres
mapeo_nombres <- setNames(nombres_df$Site.ID, nombres_df$ID)
# Ruta de la carpeta de resultados para los archivos con nombres actualizados
ruta_resultados <- "C:/Users/Usuario/Desktop/Archivos_tesis/Graphab_resultados/Resultados_lmetrics"
# Obtener la lista de archivos CSV en la carpeta de resultados
archivos_csv <- list.files(ruta_resultados, pattern = "\\.csv$", full.names = TRUE)
# Iterar sobre los archivos CSV en la carpeta de resultados
for (archivo_csv in archivos_csv) {
# Leer el archivo CSV
datos <- read.csv(archivo_csv, stringsAsFactors = FALSE)
# Reemplazar los números en las columnas "ID1" y "ID2" por los nombres correspondientes
datos$ID1 <- mapeo_nombres[as.character(datos$ID1)]
datos$ID2 <- mapeo_nombres[as.character(datos$ID2)]
# Escribir los datos actualizados en el archivo CSV
write.csv(datos, file = archivo_csv, row.names = FALSE)
}
# Ruta del archivo CSV con los nombres correspondientes a los números
archivo_nombres <- "C:/Users/Usuario/Desktop/Archivos_tesis/Clados_defin/Clados_todo_espeletia - copia (2).csv"
# Leer el archivo CSV con los nombres
nombres_df <- read.csv(archivo_nombres, stringsAsFactors = FALSE)
# Crear un mapeo entre los números y los nombres
mapeo_nombres <- setNames(nombres_df$Site.ID, nombres_df$ID)
# Ruta de la carpeta de resultados para los archivos con nombres actualizados
ruta_resultados <- "C:/Users/Usuario/Desktop/Archivos_tesis/Graphab_resultados/Resultados_lmetrics"
# Obtener la lista de archivos CSV en la carpeta de resultados
archivos_csv <- list.files(ruta_resultados, pattern = "\\.csv$", full.names = TRUE)
# Iterar sobre los archivos CSV en la carpeta de resultados
for (archivo_csv in archivos_csv) {
# Leer el archivo CSV
datos <- read.csv(archivo_csv, stringsAsFactors = FALSE)
# Reemplazar los números en las columnas "ID1" y "ID2" por los nombres correspondientes
datos$ID1 <- mapeo_nombres[as.character(datos$ID1)]
datos$ID2 <- mapeo_nombres[as.character(datos$ID2)]
# Escribir los datos actualizados en el archivo CSV
write.csv(datos, file = archivo_csv, row.names = FALSE)
}
# Cargar los datos de distancias evolutivas
matriz_tiempos <- read.csv("C:/Users/Usuario/Desktop/Archivos_tesis/Distancias_evolutivas/Distancias_evolutivas_CF_Clado_C_R_T - gdm.csv", row.names = 1)
# Escalar los datos a valores entre 0 y 1
scaled_data <- matriz_tiempos - min(matriz_tiempos)
scaled_data <- scaled_data / max(scaled_data)
# Convertir los valores en notación científica a decimales
options(scipen = 999)  # Evitar la notación científica
scaled_data_decimal <- as.data.frame(scaled_datda)
# Cargar los datos de pseudocoordenadas
pseudocoordenadas <- read.csv("C:/Users/Usuario/Desktop/Archivos_tesis/GDM/GDM_C_R_T.csv")
# Cargar los datos de distancias evolutivas
matriz_tiempos <- read.csv("C:/Users/Usuario/Desktop/Archivos_tesis/Distancias_evolutivas/Distancias_evolutivas_CF_Clado_C_R_T - gdm.csv", row.names = 1)
# Escalar los datos a valores entre 0 y 1
scaled_data <- matriz_tiempos - min(matriz_tiempos)
scaled_data <- scaled_data / max(scaled_data)
# Convertir los valores en notación científica a decimales
options(scipen = 999)  # Evitar la notación científica
scaled_data_decimal <- as.data.frame(scaled_datda)
scaled_data_decimal <- as.data.frame(scaled_data)
scaled_data_decimal
